import streamlit as st
from streamlit_timeline import timeline

# Section 1: MCQs Questions about Self
def mcq_section(questions, answers_by_child):
    st.subheader("V√≤ng 1: Ai hi·ªÉu m·∫π Lan nh·∫•t?!")
    
    selected_answers = {}
    # Display all questions at once
    for idx, question in enumerate(questions):
        st.write(f"C√¢u {idx + 1}: {question}")
        
        # Display the answer options from each contestant
        options = [f"{name}: {answer}" for name, answer in answers_by_child[idx].items()]
        options.append("Kh√¥ng c√≥ c√¢u n√†o ƒë√∫ng c·∫£")  # Add "None of the above" option
        
        selected_answers[idx] = st.multiselect(f"M·∫π h√£y ch·ªçn c√¢u tr·∫£ l·ªùi ƒë√∫ng nh·∫•t cho C√¢u {idx + 1}:", options, key=f"q_{idx}")
    
    return selected_answers

# Section 2: MCQs for Photos (Guessing event/year)
def photo_mcq_section(photos, guesses_by_child):
    st.subheader("V√≤ng 2: Nh√¨n h√¨nh ƒëo√°n ƒë·ªãa ƒëi·ªÉm")

    selected_photo_answers = {}
    # Display all photos at once
    for idx, (photo_url, question) in enumerate(photos.items()):
        st.write(f"·∫¢nh {idx + 1}: {question}")
        st.image(photo_url, use_column_width=True)
        
        # Display the guessing options
        options = [f"{name}: {guess}" for name, guess in guesses_by_child[idx].items()]
        options.append("Kh√¥ng c√≥ c√¢u n√†o ƒë√∫ng c·∫£")  # Add "None of the above" option
        
        selected_photo_answers[idx] = st.multiselect(f"M·∫π h√£y ch·ªçn c√¢u tr·∫£ l·ªùi ƒë√∫ng nh·∫•t cho ·∫¢nh {idx + 1}:", options, key=f"photo_{idx}")
    
    return selected_photo_answers

# Section 3: Sharing Videos and Memories (No scoring here)
def memory_section(children_videos):
    st.subheader("V√≤ng 3: L·ªùi ch√∫c t·ª´ c·∫£ nh√†")

    # Tabs for each child
    tabs = st.tabs([f"{child}" for child in children_videos.keys()])
    
    for i, (child, video_url) in enumerate(children_videos.items()):
        with tabs[i]:
            st.write(f"L·ªùi ch√∫c c·ªßa {child}")
            st.video(video_url)
            st.write(f"L·ªùi ch√∫c c·ªßa {child}!")

# Section to display the final scores and show top 3 participants
def score_conclusion_section():
    st.subheader("K·∫øt qu·∫£ v√≤ng thi!")
    
    # Sort the scores in descending order to get top 3 and lowest 3
    sorted_scores = sorted(st.session_state.scores.items(), key=lambda x: x[1], reverse=True)
    
    # Top 3 participants
    top = sorted_scores[:3]
    for i in range(2, len(sorted_scores)-1):
        if sorted_scores[i][1]==sorted_scores[i+1][1]:
            top = sorted_scores[:i+1]
        else:
            break
    
    # Lowest 3 participants
    lowest = sorted(sorted_scores, key=lambda x: x[1])[:3]
    for i in range(2, len(sorted_scores)-1):
        if sorted_scores[i][1]==sorted_scores[i+1][1]:
            lowest = sorted(sorted_scores, key=lambda x: x[1])[:i+1]
        else:
            break

    # Display the top 3 participants
    st.write("üéâ **C·∫£m ∆°n c·∫£ nh√† ƒë√£ tham gia tr√≤ ch∆°i! D∆∞·ªõi ƒë√¢y l√† nh·ªØng ng∆∞·ªùi c√≥ ƒëi·ªÉm s·ªë cao nh·∫•t:**")
    prev_score=0
    i=-1
    for (name, score) in enumerate(top):
        i += 1
        if prev_score==score:
            i -= 1
        st.write(f"**{i}. {name}** v·ªõi s·ªë ƒëi·ªÉm: {score} ƒëi·ªÉm")
        prev_score = score
    
    # Fun message for the top participant
    if top:
        if top[0][1]!=top[1][1]:
            st.write(f"üèÜ Sau 2 v√≤ng thi cƒÉng th·∫≥ng, **{top[0][0]}** l√† ng∆∞·ªùi hi·ªÉu m·∫π Lan nh·∫•t qu·∫£ ƒë·∫•t ü§Ø S·ªëc ngang!")
        else:
            string = top[0][0]
            for i in range(len(top)-1):
                if top[i][1] == top[i+1][1]:
                    string = string + " v√† " + top[i+1][0]
                else:
                    st.write(f"üèÜ Sau 2 v√≤ng thi cƒÉng th·∫≥ng, **{string}** l√† ng∆∞·ªùi hi·ªÉu m·∫π Lan nh·∫•t qu·∫£ ƒë·∫•t ü§Ø S·ªëc ngang!")
                    break
    
    # Fun message for the lowest participant
    if lowest:
        if lowest[0][1]!=lowest[1][1]:
            st.write(f"üòÇ Ngo√†i ra th√¨ c√≥ **{lowest[0][0]}** c·∫ßn ƒëi ch∆°i v·ªõi m·∫π/b√°c/ch·ªã Lan ƒë·ªÉ hi·ªÉu nhau h∆°n!")
        else:
            string = lowest[0][0]
            for i in range(len(lowest)-1):
                if lowest[i][1] == lowest[i+1][1]:
                    string = string + " v√† " + lowest[i+1][0]
                else:
                    st.write(f"üòÇ Ngo√†i ra th√¨ c√≥ **{string}** c·∫ßn ƒëi ch∆°i v·ªõi m·∫π/b√°c/ch·ªã Lan ƒë·ªÉ hi·ªÉu nhau h∆°n!")
                    break

# Section to display the timeline (this will always show when the memory section is shown)
def display_timeline():
    with open('timeline.json', "r") as f:
        data = f.read()
    
    # Render timeline
    timeline(data, height=800)


# Main function to run the app
def main():
    st.title("Ch√∫c m·ª´ng sinh nh·∫≠t m·∫π üéâüíÉ")

    # Initialize scores and state flags in session state if not already done
    if 'scores' not in st.session_state:
        st.session_state.scores = {child: 0 for child in ["M·∫π ngo·∫°i", "C·∫≠u Quang", "M·∫π Mai Anh", "H√† Linh", "Trung", "Nguy√™n", "Ngh√©"]}
    
    if 'show_memory_section' not in st.session_state:
        st.session_state.show_memory_section = False
    
    if 'scoring_done' not in st.session_state:
        st.session_state.scoring_done = False

    # Questions and answers data for Section 1
    questions = [
        "Y·∫øu t·ªë quan tr·ªçng nh·∫•t khi·∫øn m·∫π/b√°c/ch·ªã Lan th·∫•y **m·ªôt b·ªô phim hay**?",
        "Khi ra kh·ªèi nh√†, m·∫π/b√°c/ch·ªã Lan d·ªÖ **qu√™n ƒë·ªì g√¨ nh·∫•t**?",
        "M·∫π/b√°c/ch·ªã Lan s·∫Ω **l√†m g√¨ khi b·ª±c m√¨nh**?",
        "ƒê·ªãa ƒëi·ªÉm du l·ªãch m√† m·∫π/b√°c/ch·ªã Lan **mu·ªën ƒë·∫øn ti·∫øp theo**?",
        "ƒêi·ªÅu g√¨ m·∫π Lan th·∫•y m√¨nh l√†m **r·∫•t gi·ªèi** nh∆∞ng **√≠t ng∆∞·ªùi bi·∫øt**?"
    ]
    answers_by_child = [
        {"M·∫π ngo·∫°i": "Sample", "C·∫≠u Quang": "Ti·∫øng Anh d·ªÖ nghe", "M·∫π Mai Anh": "H√†nh ƒë·ªông, di·ªÖn vi√™n ƒë·∫πp", "H√† Linh": "Di·ªÖn vi√™n ƒë·∫πp trai xinh g√°i", "Trung": "Sample", "Nguy√™n": "1F", "Ngh√©": "Sample"},
        {"M·∫π ngo·∫°i": "Sample", "C·∫≠u Quang": "N√£o üòÇ", "M·∫π Mai Anh": "Ch√¨a kh√≥a, ƒëi·ªán tho·∫°i", "H√† Linh": "ƒêi·ªán tho·∫°i", "Trung": "Sample", "Nguy√™n": "Sample", "Ngh√©": "Sample"},
        {"M·∫π ngo·∫°i": "Sample", "C·∫≠u Quang": "L√†m vi·ªác", "M·∫π Mai Anh": "X·∫£ lu√¥n!", "H√† Linh": "C·∫±n nh·∫±n li√™n t·ª•c", "Trung": "Sample", "Nguy√™n": "Sample", "Ngh√©": "Sample"},
        {"M·∫π ngo·∫°i": "Sample", "C·∫≠u Quang": "Machu Picchu", "M·∫π Mai Anh": "Mexico", "H√† Linh": "Ch√¢u √Çu", "Trung": "Sample", "Nguy√™n": "Sample", "Ngh√©": "Sample"},
        {"M·∫π ngo·∫°i": "Sample", "C·∫≠u Quang": "Sinh t·ªë", "M·∫π Mai Anh": "N·∫•u ƒÉn", "H√† Linh": "Ca h√°t", "Trung": "Sample", "Nguy√™n": "Sample", "Ngh√©": "Sample"}
    ]

    # Photo guessing data for Section 2
    photos = {
        "photo1.jpg": "·∫¢nh n√†y ƒë∆∞·ª£c ch·ª•p ·ªü ƒë√¢u, v√†o nƒÉm n√†o?",
        "photo2.jpg": "·∫¢nh n√†y ƒë∆∞·ª£c ch·ª•p ·ªü ƒë√¢u, v√†o nƒÉm n√†o?",
        "photo3.jpg": "·∫¢nh n√†y ƒë∆∞·ª£c ch·ª•p ·ªü ƒë√¢u, v√†o nƒÉm n√†o?",
        "photo4.jpg": "·∫¢nh n√†y ƒë∆∞·ª£c ch·ª•p ·ªü ƒë√¢u, v√†o nƒÉm n√†o?"
    }
    guesses_by_child = [
        {"M·∫π ngo·∫°i": "Guess 1A", "C·∫≠u Quang": "Guess 1B", "M·∫π Mai Anh": "Guess 1C", "H√† Linh": "Guess 1D", "Trung": "Guess 1E", "Nguy√™n": "Guess 1F", "Ngh√©": "Guess 1G"},
        {"M·∫π ngo·∫°i": "Guess 2A", "C·∫≠u Quang": "Guess 2B", "M·∫π Mai Anh": "Guess 2C", "H√† Linh": "Guess 2D", "Trung": "Guess 2E", "Nguy√™n": "Guess 2F", "Ngh√©": "Guess 2G"},
        {"M·∫π ngo·∫°i": "Guess 3A", "C·∫≠u Quang": "Guess 3B", "M·∫π Mai Anh": "Guess 3C", "H√† Linh": "Guess 3D", "Trung": "Guess 3E", "Nguy√™n": "Guess 3F", "Ngh√©": "Guess 3G"},
        {"M·∫π ngo·∫°i": "Guess 4A", "C·∫≠u Quang": "Guess 4B", "M·∫π Mai Anh": "Guess 4C", "H√† Linh": "Guess 4D", "Trung": "Guess 4E", "Nguy√™n": "Guess 4F", "Ngh√©": "Guess 4G"}
    ]

    # Video URLs for Section 3
    children_videos = {
        "M·∫π ngo·∫°i": "https://youtu.be/tuQ5DIUFlHs?si=4dQZ9oC1V1faYFBu",
        "C·∫≠u Quang": "https://youtu.be/tuQ5DIUFlHs?si=4dQZ9oC1V1faYFBu",
        "M·∫π Mai Anh": "https://youtu.be/tuQ5DIUFlHs?si=4dQZ9oC1V1faYFBu",
        "H√† Linh": "https://youtu.be/tuQ5DIUFlHs?si=4dQZ9oC1V1faYFBu",
        "Trung": "https://youtu.be/tuQ5DIUFlHs?si=4dQZ9oC1V1faYFBu",
        "Nguy√™n": "https://youtu.be/tuQ5DIUFlHs?si=4dQZ9oC1V1faYFBu",
        "Ngh√©": "https://youtu.be/tuQ5DIUFlHs?si=4dQZ9oC1V1faYFBu"
    }

    # Display MCQ section
    selected_mcq_answers = mcq_section(questions, answers_by_child)
    st.divider()

    # Display photo guessing section
    selected_photo_answers = photo_mcq_section(photos, guesses_by_child)

    # Button to calculate scores and display final results
    if st.button("T√≠nh ƒëi·ªÉm v√† hi·ªán k·∫øt qu·∫£") and not st.session_state.scoring_done:
        # Calculate scores based on selected options (MCQ + Photos)
        for idx, selected in selected_mcq_answers.items():
            for option in selected:
                child_name = option.split(":")[0]
                if child_name in st.session_state.scores and "Kh√¥ng c√≥ c√¢u n√†o ƒë√∫ng c·∫£" not in option:
                    st.session_state.scores[child_name] += 1
        
        for idx, selected in selected_photo_answers.items():
            for option in selected:
                child_name = option.split(":")[0]
                if child_name in st.session_state.scores and "Kh√¥ng c√≥ c√¢u n√†o ƒë√∫ng c·∫£" not in option:
                    st.session_state.scores[child_name] += 1
        
        st.session_state.scoring_done = True  # Mark scoring as done to avoid recalculating

    # Always show scores if scoring is done
    if st.session_state.scoring_done:
        score_conclusion_section()

    # Show button to reveal the memory videos after the scores are displayed
    if st.session_state.scoring_done and st.button("Ti·∫øp t·ª•c ƒë·∫øn ph·∫ßn l·ªùi ch√∫c"):
        st.session_state.show_memory_section = True

    # Show memory videos only after clicking the button
    if st.session_state.show_memory_section:
        memory_section(children_videos)
        display_timeline()

if __name__ == "__main__":
    main()
